generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Users {
    id_user            String                @id @default(uuid())
    name               String
    email              String                @unique
    phone_number       String?               @unique
    senha              String
    avatar             String?
    born               DateTime
    created_at         DateTime              @default(now())
    funcao_id          String
    updated_at         DateTime              @updatedAt
    user_status        UserStatus            @default(ACTIVO)
    avatarImages       AvatarImagesArchive[] @relation("UserToAvatarImages")
    funcao             Funcao                @relation("UserToFuncao", fields: [funcao_id], references: [id_funcao], onDelete: Cascade)
    invoicesId_invoice String?
}

model AvatarImagesArchive {
    id_avatar  String   @id @default(uuid())
    image      String
    user_id    String
    created_at DateTime @default(now())
    user       Users    @relation("UserToAvatarImages", fields: [user_id], references: [id_user], onDelete: Cascade)

    @@map("AvatarImagesHistoric")
}

model Funcao {
    id_funcao   String      @id @default(uuid())
    name_funcao String
    description String?
    created_at  DateTime    @default(now())
    updated_at  DateTime    @updatedAt
    status      TableStatus @default(ACTIVO)
    users       Users[]     @relation("UserToFuncao")
}

model Products {
    id_product    String        @id @default(uuid())
    name_product  String
    description   String?
    logo          String?
    created_at    DateTime      @default(now())
    updated_at    DateTime      @updatedAt
    date_validate String
    price         String
    quantity      String
    methodPayment MethodPayment @default(CACHE)
    totalLucro    String?
    invoice       Invoices?     @relation("ProductToDivida")
    status        ProductStatus @default(NAO_VENDIDO)
    // stock         Stock         @relation("ProductToStock", fields: [stock_id], references: [id_stock], onDelete: Cascade)
}

model Stock {
    id_stock      String      @id @default(uuid())
    name          String
    description   String?
    created_at    DateTime    @default(now())
    updated_at    DateTime    @updatedAt
    date_validate String
    price         String
    quantity      String
    status        StockStatus @default(NAO_VENDIDO)
}

model Clients {
    id_client  String    @id @default(uuid())
    name       String
    telefone   String
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    invoices   Invoices? @relation("ClientToDivida")
}

model Invoices {
    id_invoice String         @id @default(uuid())
    client_id  String?        @unique
    client     Clients        @relation("ClientToDivida", fields: [id_invoice], references: [id_client], onDelete: Cascade)
    product_id String         @unique
    product    Products       @relation("ProductToDivida", fields: [product_id], references: [id_product], onDelete: Cascade)
    price      String
    date       DateTime
    created_at DateTime       @default(now())
    updated_at DateTime       @updatedAt
    approval   ApprovalStatus @default(NAO_PAGAS)
}

model Venda {
    id            String        @id @default(uuid())
    name_product  String?
    description   String?
    methodPayment MethodPayment @default(CACHE)
    date_validate DateTime
    price         String
    quantity      String
    status        ProductStatus @default(NAO_VENDIDO)
    created_at    DateTime      @default(now())
    updated_at    DateTime      @updatedAt
    date_venda    DateTime?     @default(now())
}

enum UserStatus {
    ACTIVO
    INATIVO
}

enum TableStatus {
    ACTIVO
    INATIVO
}

enum ProductStatus {
    VENDIDO
    NAO_VENDIDO
    EXPIRADO
    VENDENDO
}

enum StockStatus {
    NAO_VENDIDO
    EXPIRADO
}

enum MethodPayment {
    MULTICAIXA_EXPRESS
    CACHE
    TPA
}

enum ApprovalStatus {
    PAGAS
    NAO_PAGAS
}
