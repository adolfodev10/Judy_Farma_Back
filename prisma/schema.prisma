generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Users {
    id_user      String                @id @default(uuid())
    name         String
    email        String                @unique
    phone_number String?               @unique
    senha        String
    avatar       String?
    born         DateTime
    created_at   DateTime              @default(now())
    funcao_id    String
    updated_at   DateTime              @updatedAt
    user_status  UserStatus            @default(ACTIVO)
    avatarImages AvatarImagesArchive[] @relation("UserToAvatarImages")
    funcao       Funcao                @relation("UserToFuncao", fields: [funcao_id], references: [id_funcao], onDelete: Cascade)
    Products     Products[]
    Venda        Venda[]
}

model AvatarImagesArchive {
    id_avatar  String   @id @default(uuid())
    image      String
    user_id    String
    created_at DateTime @default(now())
    user       Users    @relation("UserToAvatarImages", fields: [user_id], references: [id_user], onDelete: Cascade)

    @@map("AvatarImagesHistoric")
}

model Funcao {
    id_funcao   String      @id @default(uuid())
    name_funcao String
    description String?
    created_at  DateTime    @default(now())
    updated_at  DateTime    @updatedAt
    status      TableStatus @default(ACTIVO)
    users       Users[]     @relation("UserToFuncao")
}

model Products {
    id_product   String   @id @default(uuid())
    name_product String
    description  String?
    logo         String?
    user_id      String
    created_at   DateTime @default(now())
    updated_at   DateTime @updatedAt
    user         Users    @relation(fields: [usersId_user], references: [id_user])
    price        Float
    quantity     Int
    client_id    String?
    venda        Venda[]
    client       Clients? @relation(fields: [client_id], references: [id_client])
    usersId_user String
}

model Clients {
    id_client  String     @id @default(uuid())
    name       String
    telefone   String
    invoice_id String?    @unique
    user_id    String
    invoices   Invoices?  @relation(fields: [invoice_id], references: [id_invoice])
    products   Products[]
    created_at DateTime   @default(now())
    updated_at DateTime   @updatedAt
}

model Invoices {
    id_invoice String   @id @default(uuid())
    client_id  String?
    product_id String
    date       DateTime
    client     Clients?
}

model Venda {
    id           String   @id @default(uuid())
    description  String
    product_id   String
    user_id      String
    created_at   DateTime @default(now())
    updated_at   DateTime @updatedAt
    product      Products @relation(fields: [product_id], references: [id_product], onDelete: Cascade)
    usersId_user String?
    Users        Users?   @relation(fields: [usersId_user], references: [id_user])
}

enum UserStatus {
    ACTIVO
    INATIVO
}

enum TableStatus {
    ACTIVO
    INATIVO
}
